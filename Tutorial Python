print('Olá, Mundo!')
msg = ('Olá, mundo!')
print(msg)
#outra maneira de print
print('A soma vale {}'.format(s))
#{} mascara. qdo vc coloca o format o que esta dentro dos parenteses vai pra chave

nome = input('Qual é o seu nome? ')
sobrenome = input("E seu sobrenome?")
idade = int(input('E sua idade?'))
print('É um prazer te conhecer, {}!'.format(nome,sobrenome,idade))

#Variável - É um espacinho no computador pra guardar o que o usuário vai digitar

# Desafio 1 = Criar uma mensagem que leia o nome de uma pessoa e mostre uma mensagem de boas vindas

nome = input("Qual é o seu nome? ")
print(nome, ", Seja muito bem vindo(a)!")

# Desafio 2 = Leia dia, mês e ano de nascimento de uma pessoa e mostre uma msg com a data formatada

data = input('Qual o dia do seu nascimento? ')
mes = input('Qual o mês do seu nascimento? ')
ano = input('Qual o seu ano de nascimento? ')


print('Você nasceu no dia',data,'de',mes,'de',ano, ',correto?')

#ver tipo de classe - type
n1 = input('Digite um valor')
print(type(n1))

#{} máscara
n1 = int(input('Digite um valor: '))
n2 = int(input('Digite outro: '))
s = n1 + n2
print('A soma entre {} e {} vale {}'.format(n1,n2, s))

#print('A soma entre {} e {} vale {}').format(n1, n2, s))


#{}!'.format(nome) sustituir o nome
#Tipos primitivos
#4 tipos primitivos iniciais
#Crie um sprint python que leia dois números e tente mostrar a soma entre eles

#int
#sem o int ele lê o número como nome(string) - concatenação
#numeros inteiros: 4, 7, -7, 0, 9875 - sem virgulas
#td q está dentro do parenteses vai ser lido com um número inteiro
n1 = int(input('Primeiro número'))
n2 = int(input('Segundo número'))
soma = n1+n2
print('A soma é',soma)

#float - numeros reais ou numeros de ponto flutuante
# 4.6 , 0.66 , -15.223, 7.0 (numeros com ponto, virgula. ponto flutuante) - numero real, valor de pi
n = float(input('Digite um valor: '))
print(n)
#transforma para float
#se quiser saber o tipo print(type(n))

#bool - valores logicos ou boleanos
#só aceitam dois valores: verdadeiro (True) ou false (False) - capitalizado
#ler v ou f
n = bool(input('Digite um valor: '))
print(n)

#str - caracteres ou strings
#palavras, todas entres ''(string vazia), '7.5'

#se é possivel converter o q digito em numerico
n = input('Digite algo')
print(n.isnumeric())

#Faça um programa que leia algo pelo teclado e mostre seu tipo primitivo e todas as informaçoes possivel sobre ele
#parenteses - metodos
#todo sring tem esses metodos

a = input('Digite algo: ')
print('O tipo primitivo desse valor é ', type(a))
print('Só tem espaços? ', a.isspace())
print('É um número?', a.isnumeric())
print('É alfabético?', a.isalpha())
print('É alfanumerico? ', a.isalnum())
print('Está em maiúscula? ', a.isupper())
print('Está em minúsculas? ', a.islower())
print('Está capitalizada?', a.istitle())

#Fazendo na formatação nova
print(f'Está capitalizada? {a.istitle()}')

#Operadores aritméticos
#operadores precisam de operandos - pode ser numero, string, variavel
#Operadores binários precisam de dois operandos
# 5 + 2 , 5-2, 5//2, 5**6==, 5%6== -> no python = é == . um é recebe(atribuição)
# + adição

# - subtraçã0

# * multiplicação

#  / Divisão

# ** Potência
pow(4,3)
64
# //Divisão inteira


# % Resto de divisão

#Raiz quadrada
81**(1/2)
9.0
#para calcular a raiz quadrada é só elevar esse numero a 1/2
#raiz cubica (1,3)

#Ordem de precedência
#1 - ()
#2 - **
#3 - * / // % - faz quem aparecer primeiro
#4 - + -

# alinhar a direita o carol :> - 20 espaços alinhado a direita
nome = input('Qual é o seu nome?')
print('Prazer em te conhecer, {:>20}!'.format(nome))
#centralizado
print('Prazer em te conhecer, {:^20}!'.format(nome))
#20 espacos, centralizado e com o sinal q coloquei
nome = input('Qual é o seu nome?')
print('Prazer em te conhecer, {:=^20}!'.format(nome))

n1 = int(input('Um valor '))
n2 = int(input('Outro valor'))
s = n1 + n2
m = n1 * n2
d = n1 / n2
di = n1 // n2
e = n1 ** n2

print('A soma é {}, o produto é {}, a divisão é {}, a divisão inteira é {}, a fatoração é {}'.format(s, m, d, di, e))
Um valor 2
Outro valor8
A soma é 10, o produto é 16, a divisão é 0.25, a divisão inteira é 0, a fatoração é 256

Process finished with exit code 0

# quiser controlar o numero de casas - {:.3f}
print(
    'A soma é {}, o produto é {}, a divisão é {:.3f}, a divisão inteira é {:.3f}, a fatoração é {}'.format(s, m, d, di,
                                                                                                           e))

#se nao quiser quebrar linha - end=' '
print('A soma é {}, o produto é {}, a divisão é {:.3f}'.format(s, m, d), end=' ')
print('Divisão inteira é {}, e portência é {}'.format(di, e))

#para quebrar linha \n
print('A soma é {}, \n o produto é {}, \n a divisão é {:.3f}'.format(s, m, d), end=' ')

#>>>
end=' >>> ')

#24/10/21
#Usando os módulos de python
#O Python vem com linguagens básicas
#Para importar para lá usamos o comando "import"
#importações unicas - from doce import pudim
# importar tudo - import bebida
# Exemplo de biblioteca padrao - math (matematica) - algumas funcionalidades matemáticas extras
    #import math - importa tudo
        #ceil - arrendonda pra cima
        #floor - pra baixa
        #trunc - nao arredonda
        #pow -potencia
        #sqrt -raiz quadrada
        #factorial - fatoriais
    # from math import sqrt (importa de toda a math somente a sqrt)
     # from math import sqrt, ceil (importa de toda a math somente a sqrt e ceil)
     
import math
numero = int(input('Digite um número: '))
raiz = math.sqrt(numero)
print('A raiz de {} é igual a {:.0f}'.format(numero, raiz))

    #arrendondando
 print('A raiz de {} é igual a {:.0f}'.format(numero, math.ceil(raiz)))
 
 # Número real para sua porção inteira
 import math
n = float(input('Digite um número para ver sua porção inteira: '))
pi = math.floor(n)
print('O valor digitado foi: {}. A porção inteira desse número é: {}'.format(n, pi))

''''import math
n = float(input('Digite um número para ver sua porção inteira: '))
pi = math.floor(n)
print('O valor digitado foi: {}. A porção inteira desse número é: {}'.format(n, pi))'''''

'''OU
print('O valor digitado foi {} e sua porção inteira é {}'.format(num, math.truc(num)))'''

'''from math import trunc
num = float(input('Digite um valor: '))
print('O valor digitado foi {} e a sua porção inteira é {}'.format(num, trunc(num)))'''

num = float(input('Digite um valor: '))
print('O valor digitado foi {} e sua porção inteira é {}'.format(num, int(num)))


#AULA 9 - MANIPULANDO CADEIAS DE TEXTO

Curso em vídeo Python - cadeias de textos \ caracteres ''
frase = 'Curso em Python'

# > Fatiamento
    frase[9]- []lista
    Pegar uma letra - quero pegar 9 - inicia em 0
    frase [9:13] - vai ir de 9 a 12 - incluindo o 9 e removendo o 13
    frase[9:21:2] - vai de 9 a 20, pulando de 2 em 2
    frase[:5]- :(onde vai comecar). como nao coloquei ,ele vai ate o 0-4
    frase[15:] - vai ir ate o final
    frase[9::3] : - vai ate o final, :3 vai pular de 3 em 3
    
# > Análise
    len - cumprimento - frase = 'Curso em Vídeo Python'
    print(len(frase))
    len(frase) - 21 caracteres - ex.
    frase.count('o') - qtas vezes aparece a letra o
    frase.count('o', 0, 13) - ele vai do 0 até 12 somente com as letras o
    frase.find('deo') - - ele vai dizer onde começou
    frase.find('Android') - vai dar -1 ( nao existe aqui embaixo)
    'curso'in frase - true
    
#> Transformação
   > frase.replace('Python", 'Android') - 
        frase = 'Curso em Vídeo Python'
        print(frase.replace('Python', 'Android'))
      >  para salvar
        frase = 'Curso em Vídeo Python'
        frase = frase.replace('Python', 'Android')
        print(frase)
      > print(frase.find('Curso'))

    frase.upper() - vai ficar em maiusculas
    frase.lower() - vai tudo pra minusculo
    frase.capitalize() - Só o primeiro fica maiusculo
    frase.title() - todas as primeiras palavras maiusculas
    frase.strip() - remove todos os espacos antes e depois
    frase.rstrip() - so remove os espaços da direita
    frase.lstrip() - so remove os da esquerda
    
#Divisão
    frase.split() - cada um das palavras vai gerar uma lista.divide uma strig em uma lista
    
  >   frase = 'Curso em Vídeo Python'
    print(frase.split())
    
    >frase = 'Curso em Vídeo Python'
dividido = frase.split()
print(dividido[0])

> frase = 'Curso em Vídeo Python'     (aqui ele mostra a letra 2 da palavra 3
dividido = frase.split()
print(dividido[2] [3])
    
#Junção
    '-'.join(frase) - vai juntar e colocar tracinhos
    
#Colar um franse grande mas sem dar print por linha """
print("""Os ventos, as chuvas, as ondas do mar e as mudanças de temperatura são exemplos de 
agentes importantes na formação de rochas. 
Quais são as rochas que dependem desses agentes para ser formadas? Justifique sua resposta""")

# IF
    Se
    Else - só mais uma condição
    elif - senão se
    else - se nada disso for verdade
    nome = "Nico"

sobrenome = "Steppat"
print(nome, sobrenome, sep="_") ou end

    #adivinhar um número secreto
print('*********************************')
print('Bem vindo no jogo de adivinhação!')
print('*********************************')

numero_secreto = 42


chute = int(input('Digite o seu número: '))

print('Você digitou:' , chute)

acertou = numero_secreto == chute
maior = chute > numero_secreto
menor = chute < numero_secreto

if(acertou):
    print('Você acertou!')
else:
    if(maior):
        print('Vc chutou pra cima')
    elif(menor):
        print('Vc chutou pra baixo')

print('Fim do jogo.')

# WHILE

    Se vc quer repetir um código, vc usa um laço
    
    #adivinhar um número secreto
print('*********************************')
print('Bem vindo no jogo de adivinhação!')
print('*********************************')

numero_secreto = 42
total_de_tentativas = 3
rodada = 1


#enquanto há tentativas:
#enquanto há tentativas execute este codigos (while). While como o if recebe uma condição. Mas o IF faz uma vez.
#o while executa enquanto ainda há esta condição.
# Começo com 0 e em cada laço (rodada vou diminuindo)

while(rodada <= total_de_tentativas):
    print('Tentativa {} de {}'.format(rodada, total_de_tentativas))
    chute = int(input('Digite um numero: '))
    print('Vc digitou', chute)

    acertou = chute == numero_secreto
    maior =   chute > numero_secreto
    menor =   chute < numero_secreto

    if(acertou):
        print('Vc acertou!')
    elif(maior):
        print('Vc chutou pra cima')
    elif(menor):
        print('Vc chutou pra baixo')

    rodada = rodada + 1
    
#FOR

#FOR
    ##Com qual valor vc quer começar e até qual valor vc quer ir.
   # Range - define uma série de valores
# ex:. for rodada in range (1, 10): quero fazer um laço - (for - para), essa variavel (rodada) pega o valor dentro dessa serie (in range) de valores
    #pega do laço 1 até o 10
    #se quiser um step (1,10,2)
    
    #Se n usar o range [1, 2, 3, 4...] - o range define isso. lembra de colocar o range + 1''
    range(start, stop, [step])
    
    #adivinhar um número secreto
print('*********************************')
print('Bem vindo no jogo de adivinhação!')
print('*********************************')

numero_secreto = 42
total_de_tentativas = 3
rodada = 1


#enquanto há tentativas:
#enquanto há tentativas execute este codigos (while). While como o if recebe uma condição. Mas o IF faz uma vez.
#o while executa enquanto ainda há esta condição.
# Começo com 0 e em cada laço (rodada vou diminuindo)

for rodada in range(1, total_de_tentativas + 1):
    print('Tentativa {} de {}'.format(rodada, total_de_tentativas))
    chute = int(input('Digite um numero: '))
    print('Vc digitou', chute)

    acertou = chute == numero_secreto
    maior =   chute > numero_secreto
    menor =   chute < numero_secreto

    if(acertou):
        print('Vc acertou!')
    elif(maior):
        print('Vc chutou pra cima')
    elif(menor):
        print('Vc chutou pra baixo')

print('Fim de jogo')

for rodada in range(1, total_de_tentativas + 1):
    print('Tentativa {} de {}'.format(rodada, total_de_tentativas))
    chute = int(input('Digite um numero entre 1 e 100: '))
    print('Vc digitou', chute)

    if(chute < 1 or chute > 100):
        print('Vc deve digitar um número entre 1 e 100!')
        continue
        #ele n para. se digitar menor do q 0 ele reinicia a iteração.


    acertou = chute == numero_secreto
    maior =   chute > numero_secreto
    menor =   chute < numero_secreto

    if(acertou):
        print('Vc acertou!')
        break
        #break - ele sai do laço
    elif(maior):
        print('Vc chutou pra cima')
    elif(menor):
        print('Vc chutou pra baixo')

print('Fim de jogo')

R$ {:7.2f} - 7 casas e duas casas decimais (float)
R$ {:07d}.formart(46) - numero inteiro
Data: {:02d}/{02d}.format(19,11)
   
   Ordem dos parametros {}
   Com o .format(), podemos especificar a ordem em que os parâmetros aparecem na string, basta apenas colocar entre as chaves ({}) da string formatada qual 
   parâmetro você quer exibir. É válido lembrar também, que o primeiro parâmetro é o zero, pois tradicionalmente na computação começamos contando de zero, ou seja, no nosso 
   caso:

print("Ola Sr.{1} {0}".format("Cordeiro","Leonardo"))


Neste exemplo, queremos um número com 7 casas inteiras, sendo duas delas decimais, resultado é R$ 0004.11. Como colocamos um número de casas inteiras superior a quantidade de casas inteiras do número, o Python coloca 0 (zeros) à esquerda. Interessante também é que a função format até arredonda, por exemplo:

"R$ {:7.1f}".format(1000.16)COPIAR CÓDIGO
Retorna:

R$  1000.2

>>> nome = 'Matheus'
>>> print(f'Meu nome é {nome}')
Meu nome é MatheusCOPIAR CÓDIGO
Quando colocamos a letra f antes das aspas, informamos ao Python que estamos utilizando uma f-string. Dessa forma o Python consegue, 
em tempo de execução, captar a expressão que está entre chaves ({ }) e avaliá-la.

Além de variáveis, podemos passar também de funções e métodos:

>>> nome = 'Matheus'
>>> print(f'Meu nome é {nome.lower()}')
Meu nome é matheus

#RANDOM

A função random.randrange() quando só possuí um parâmetro supõe que você quer dizer de zero até número passado -1, ou seja, neste caso, o menor número possível quando fazemos:

# Declarar função

Para declarar uma função, devemos usar a palavra chave def do mundo Python, seguida pelo nome da função.
    def nome_da_funcao():
    # todo o código identado faz parte da função
    print("aprendendo funções")
    
    Para chamar a nossa própria função, usamos o nome dela seguido pelos parênteses, por exemplo:

nome_da_funcao()
